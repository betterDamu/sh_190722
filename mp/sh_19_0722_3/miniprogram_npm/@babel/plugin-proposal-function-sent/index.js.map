{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _pluginSyntaxFunctionSent = _interopRequireDefault(require(\"@babel/plugin-syntax-function-sent\"));\n\nvar _helperWrapFunction = _interopRequireDefault(require(\"@babel/helper-wrap-function\"));\n\nvar _core = require(\"@babel/core\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n\n  const isFunctionSent = node => _core.types.isIdentifier(node.meta, {\n    name: \"function\"\n  }) && _core.types.isIdentifier(node.property, {\n    name: \"sent\"\n  });\n\n  const hasBeenReplaced = (node, sentId) => _core.types.isAssignmentExpression(node) && _core.types.isIdentifier(node.left, {\n    name: sentId\n  });\n\n  const yieldVisitor = {\n    Function(path) {\n      path.skip();\n    },\n\n    YieldExpression(path) {\n      if (!hasBeenReplaced(path.parent, this.sentId)) {\n        path.replaceWith(_core.types.assignmentExpression(\"=\", _core.types.identifier(this.sentId), path.node));\n      }\n    },\n\n    MetaProperty(path) {\n      if (isFunctionSent(path.node)) {\n        path.replaceWith(_core.types.identifier(this.sentId));\n      }\n    }\n\n  };\n  return {\n    name: \"proposal-function-sent\",\n    inherits: _pluginSyntaxFunctionSent.default,\n    visitor: {\n      MetaProperty(path, state) {\n        if (!isFunctionSent(path.node)) return;\n        const fnPath = path.getFunctionParent();\n\n        if (!fnPath.node.generator) {\n          throw new Error(\"Parent generator function not found\");\n        }\n\n        const sentId = path.scope.generateUid(\"function.sent\");\n        fnPath.traverse(yieldVisitor, {\n          sentId\n        });\n        fnPath.node.body.body.unshift(_core.types.variableDeclaration(\"let\", [_core.types.variableDeclarator(_core.types.identifier(sentId), _core.types.yieldExpression())]));\n        (0, _helperWrapFunction.default)(fnPath, state.addHelper(\"skipFirstGeneratorNext\"));\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]}