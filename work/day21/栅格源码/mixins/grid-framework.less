//less中的变量是延迟加载的 块级作用域


/*
      .damu-col-xs-1, .damu-col-sm-1, .damu-col-md-1, .damu-col-lg-1,
      ....
      .damu-col-xs-12, .damu-col-sm-12, .damu-col-md-12, .damu-col-lg-12{
          position: relative;
          min-height: 1px;
          padding-left:  15px;
          padding-right: 15px;
      }
  */
//1
.make-grid-columns() {
  .col(@index) {
    @item: ~".damu-col-xs-@{index}, .damu-col-sm-@{index}, .damu-col-md-@{index}, .damu-col-lg-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) {
    @item: ~".damu-col-xs-@{index}, .damu-col-sm-@{index}, .damu-col-md-@{index}, .damu-col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      position: relative;
      min-height: 1px;
      padding-left:  ceil((@grid-gutter-width / 2));
      padding-right: floor((@grid-gutter-width / 2));
    }
  }
  .col(1);
}


// 2
.make-grid(@class) {
  //2.1
  .float-grid-columns(@class);
  //2.2
  .loop-grid-columns(@grid-columns, @class, width);
  .loop-grid-columns(@grid-columns, @class, pull);
  .loop-grid-columns(@grid-columns, @class, push);
  .loop-grid-columns(@grid-columns, @class, offset);
}


/*
 .damu-col-xs-1,.damu-col-xs-2,...,.damu-col-xs-12{
    float: left;
  }
.damu-col-sm-1,.damu-col-sm-2,...,.damu-col-sm-12{
    float: left;
  }
 .damu-col-md-1,.damu-col-md-2,...,.damu-col-md-12{
    float: left;
  }
.damu-col-lg-1,.damu-col-lg-2,...,.damu-col-lg-12{
    float: left;
  }
*/
.float-grid-columns(@class) {
  .col(@index) {
    @item: ~".damu-col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    @item: ~".damu-col-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: left;
    }
  }
  .col(1);
}


// Basic looping in LESS
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-column(@index, @class, @type);
  .loop-grid-columns((@index - 1), @class, @type);
}



/*
.damu-col-xs-12 {                .damu-col-xs-1 {
  width: 12/12   ....           width: 1/12
}                           }
*/
.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .damu-col-@{class}-@{index} {
    width: percentage((@index / @grid-columns));
  }
}

/*
.damu-col-xs-push-12 {                .damu-col-xs-push-1 {          .damu-col-xs-push-0 {
  left: 12/12   ....                left: 1/12                  left: auto
}                                 }                         }
*/
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index > 0) {
  .damu-col-@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index = 0) {
  .damu-col-@{class}-push-0 {
    left: auto;
  }
}

/*
.damu-col-xs-pull-12 {                .damu-col-xs-pull-1 {          .damu-col-xs-pull-0 {
  right: 12/12   ....                right: 1/12                  right: auto
}                                 }                         }
*/
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
  .damu-col-@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .damu-col-@{class}-pull-0 {
    right: auto;
  }
}


/*
  .damu-col-xs-offset-12 {                .damu-col-xs-offset-1 {          .damu-col-xs-offset-0 {
    margin-left: 12/12   ....           margin-left: 1/12              margin-left: 0/12
  }                                   }                           }
*/
.calc-grid-column(@index, @class, @type) when (@type = offset) {
  .damu-col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
}




